#!/usr/bin/env python

# Performs adapter trimming, quality filtering and length filtering with Trim Galore and sickle.
# Different combinations of (un)paired short and long reads are possible as input.
#
# The default quality and length thresholds were chosen as in Trim Galore and sickle.
#
# Requirements:
#  - sickle (sickle / --sickle; tested with v1.33)
#  - Trim Galore (trim_galore / --trim_galore; tested with v0.4.5_dev)
#  - standard UNIX tools (rm, cat)
#
# sickle and Trim Galore have to be in $PATH or explicitly specified using the respective path options.


import os.path

from subprocess import call


# default values / constants
DEF_SICKLE_PATH = 'sickle'
DEF_TRIM_GALORE_PATH = 'trim_galore'
DEF_QUAL_THRESHOLD = 20
DEF_MIN_LENGTH = 20
DEF_VERBOSE = False


# preprocess the FASTQ reads: (1) Trim Galore, (2) sickle
def preprocess(out_dir, first_short_reads = '', second_short_reads = '', single_short_reads = '', long_reads = '',
               qual_threshold = DEF_QUAL_THRESHOLD, min_length = DEF_MIN_LENGTH, verbose = DEF_VERBOSE,
               sickle = DEF_SICKLE_PATH, trim_galore = DEF_TRIM_GALORE_PATH):

    first_final = ''
    second_final = ''
    single_short_final = ''
    long_final = ''

    if first_short_reads != '' and second_short_reads != '':
        first_tg = os.path.join(out_dir, os.path.splitext(os.path.basename(first_short_reads))[0] + '_val_1.fq')  # name of Trim Galore output file for first_short_reads
        first_final = os.path.join(out_dir, os.path.splitext(os.path.basename(first_short_reads))[0] + '_preprocessed.fastq')  # name of overall preprocessing output file for first_short_reads

        second_tg = os.path.join(out_dir, os.path.splitext(os.path.basename(second_short_reads))[0] + '_val_2.fq')  # name of Trim Galore output file for second_short_reads
        second_final = os.path.join(out_dir, os.path.splitext(os.path.basename(second_short_reads))[0] + '_preprocessed.fastq')  # name of overall preprocessing output file for second_short_reads

        unpaired_12_final = os.path.join(out_dir, 'unpaired_12_preprocessed.fastq') # extra file generated by sickle that contains reads that passed filter only in either the forward or reverse direction

        if verbose:
            print('Preprocessing %s and %s with Trim Galore...' % (first_short_reads, second_short_reads))
        call('%s --paired -q %i --length %i -o %s %s %s' % (trim_galore, qual_threshold, min_length, out_dir, first_short_reads, second_short_reads), shell = True)
        if verbose:
            print('Preprocessing %s and %s with sickle...' % (first_short_reads, second_short_reads))
        call('%s pe -f %s -r %s -o %s -p %s -s %s -t sanger -q %f -l %f' % (sickle, first_tg, second_tg, first_final, second_final, unpaired_12_final, qual_threshold, min_length), shell = True)
        call('rm %s %s' % (first_tg, second_tg), shell = True)

        if os.path.isfile(unpaired_12_final):
            single_short_final = os.path.join(out_dir, 'single_short_preprocessed.fastq')
            call('cat %s > %s' % (unpaired_12_final, single_short_final), shell = True)

    if single_short_reads != '':
        single_tg = os.path.join(out_dir, os.path.splitext(os.path.basename(single_short_reads))[0] + '_trimmed.fq') # name of Trim Galore output file for single_short_reads
        single_final = os.path.join(out_dir, os.path.splitext(os.path.basename(single_short_reads))[0] + '_preprocessed.fastq') # name of overall preprocessing output file for single_short_reads

        if verbose:
            print('Preprocessing %s with Trim Galore...' % single_short_reads)
        call('%s -q %i --length %i -o %s %s' % (trim_galore, qual_threshold, min_length, out_dir, single_short_reads), shell = True)
        if verbose:
            print('Preprocessing %s with sickle...' % single_short_reads)
        call('%s se -f %s -o %s -t sanger -q %f -l %f' % (sickle, single_tg, single_final, qual_threshold, min_length), shell = True)
        call('rm %s' % single_tg, shell = True)
        single_short_final = os.path.join(out_dir, 'single_short_preprocessed.fastq')
        call('cat %s >> %s' % (single_final, single_short_final), shell = True)

    if long_reads != '':
        long_tg = os.path.join(out_dir, os.path.splitext(os.path.basename(long_reads))[0] + '_trimmed.fq')  # name of Trim Galore output file for long_reads
        long_final = os.path.join(out_dir, os.path.splitext(os.path.basename(long_reads))[0] + '_preprocessed.fq')  # name of overall preprocessing output file for long_reads

        if verbose:
            print('Preprocessing %s with Trim Galore...' % long_reads)
        call('%s -q %i --length %i -o %s %s' % (trim_galore, qual_threshold, min_length, out_dir, long_reads), shell = True)
        if verbose:
            print('Preprocessing %s with sickle...' % long_reads)
        call('%s se -f %s -o %s -t sanger -q %f -l %f' % (sickle, long_tg, long_final, qual_threshold, min_length), shell = True)
        call('rm %s' % long_tg, shell = True)

    return first_final, second_final, single_short_final, long_final


if __name__ == '__main__':
    import argparse
    argparser = argparse.ArgumentParser()
    argparser.add_argument('out_dir', help = 'output directory')
    argparser.add_argument('-1', '--first_short_reads', default = '', help = 'first reads of paired FASTQ read data (if any)')
    argparser.add_argument('-2', '--second_short_reads', default = '', help = 'second reads of paired FASTQ read data (if any)')
    argparser.add_argument('-s', '--single_short_reads', default = '', help = 'unpaired FASTQ read data (if any)')
    argparser.add_argument('-l', '--long_reads', default = '', help = 'long FASTQ read data (if any)')
    argparser.add_argument('-q', '--qual_threshold', type = float, default = DEF_QUAL_THRESHOLD, help = 'threshold for trimming low-quality ends')
    argparser.add_argument('-m', '--min_length', type = float, default = DEF_MIN_LENGTH, help = 'minimum length of reads after quality / adapter trimming')
    argparser.add_argument('--verbose', action = 'store_true', help = 'print more information')
    argparser.add_argument('--sickle', default = DEF_SICKLE_PATH, help = 'path to sickle executable')
    argparser.add_argument('--trim_galore', default = DEF_TRIM_GALORE_PATH, help = 'path to Trim Galore executable')
    args = argparser.parse_args()

    if args.first_short_reads == '' and args.second_short_reads == '' and args.single_short_reads == '' and args.long_reads == '':
        print('ERROR: No read data is specified (at least -1 / -2 or -s or -l have to be used).')
    elif args.first_short_reads != '' and args.second_short_reads == '' or args.first_short_reads == '' and args.second_short_reads != '':
        print('ERROR: Specified paired read data is incomplete. Both options -1 and -2 have to be used when specifying paired read data.')
    else:
        preprocess(args.out_dir, args.first_short_reads, second_short_reads = args.second_short_reads,
                   single_short_reads = args.single_short_reads, long_reads = args.long_reads,
                   qual_threshold = args.qual_threshold, min_length = args.min_length, verbose = args.verbose,
                   sickle = args.sickle, trim_galore = args.trim_galore)